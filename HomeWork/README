//TODO: There are items still to finish up, in the README
//TODO: Include a README.md file in with the GitHub check-in.

TABLE OF CONTENTS
-----------------
1. Introduction
2. Statement of Work
3. Requirements
4. What was automated (Scenario 1)
5. What was automated (Scenario 2)
6. Project (Location, Structure)
7. API Documentation (Javadoc)
8. Command-line Invocation
9. Output (Expected)
10. Additional Work to be Done, if Time Permitted


1. This is the README file for the 'Interview Homework' presented to Eric
    Wiegman as part of his consideration for the "Senior Test Automation
    Engineer" position at Wikia.

2. I have created a web UI test project using the Selenium WebDriver open-source
    technology and have used Maven as the tool to perform the build and deploy
    the test (running the TestNG suite with the surefire plugin). The client
    language is Java and the test harness used is TestNG.

3. The following requirements were specified for the Project:
-------------------------------------------------------------
3.A. Keep in mind that your code should be flexible, expandable and
    maintainable.
3.B. You should be able to run your tests against the Firefox and Chrome
    browsers.
3.C. Tests should be written in Selenium WebDriver.
3.D. Feel free to use any language and framework (Java/TestNG/Maven is
    recommended, as we are developing our scripts in it, but any other
    languages/frameworks are permissible).
3.E. It is recommended to use the following patterns:
    PageObjects https://code.google.com/p/selenium/wiki/PageObjects
    PageFactory https://code.google.com/p/selenium/wiki/PageFactory
3.F. Add the necessary instructions to the README.md file in English on how to
    run your code from the command line.


3.1. Notes on Requirements
--------------------------
3.1.A. Object Oriented Principles and Design considerations were applied when
    designing the java classes.
3.1.B. The /src/main/resources/config.properties file has an entry for
    specifying which browser (Firefox or Chrome) to run against.
3.1.C. The tool used is Selenium WebDriver.
3.1.D. Maven is used to manage project dependencies. The tool used is Selenium
    (with the Java client) and the harness used is TestNG.
3.1.E. The PageFactory pattern is used.
3.1.F. This file contains instructions on how to run the test from command line.
    A briefer version (concentrating on how to run the code from the command
    line) is included in the README.md file.

[See the end of this document for other test cases to be automated for the
    "Wiki Login" and "Add Video" pages, given more time].

4. The following is a general outline of what was automated for Scenario 1:
---------------------------------------------------------------------------
4.1. Navigate to http://qm-homework.wikia.com and be redirected to Home page.
4.2.  Click the “Log in” label and wait for the Login form to 'pop up'
4.3. Enter username and password (retrieved from the config.properties file),
    left click the login button.
4.4. Wait for the Anonymous Avatar image to become a User Avatar image.
4.5. Assert that the title associated with the Avatar is indicating the
    username.

Notes:
A. Initial navigation is done in a @BeforeTest setup routine.
B. Steps 4.2 and 4.3 are encapsulated in a reusable commonLogin method.

5. The following is a general outline of what was automated for Scenario 2:
---------------------------------------------------------------------------
5.1. (Steps 4.1 through 4.3 are repeated to ensure proper log in to Wikia).
5.2. Left click the “Contribute” button.
5.3. Left click the “Add a video” button.
5.4. On the WikiaVideoAdd page, enter the URL "" into the input text field.
5.5. Left click the "Add" button. A message with text: “Video page
    File:FILENAME successfully added.” is displayed near the top of the page.
5.6. Left click the link to file on the flash message. (User is directed to a
    specific page that runs the video.)
5.7. An Assert is performed to ensure the Header text on the page matches the
    name of the video.

Unless otherwise noted, the test cases run were parameterized using the
    TestNG DataProvider -- with that data separated from the code in its own
    /src/main/java/WikiaDataProvider.java file.

Also, note that I did not perform any cleanup routines (such as logging out nor
    closing the invoked browser). This was done on purpose so that you might
    more easily check that the automation properly performed the prescribed
    procedures.

6. The project is stored on GitHub at public repository WIKIA_EWIEGMAN.
6.1 The directory structure is shown below:

    TODO: PUT TREE HERE

6.2 Please note that the directory structure is important, and file/directory
    changes should *not* be made. Failure to leave the structure as is will
    cause Maven, the surefire plugin, or other tools to not recognize the
    classpath items correctly, leading to failures.

7. For more information on the defined java elements in this project, invoke
    index.html at HomeWork/docs and use the API viewer to read the Javadoc
    supplied text.

8. Command-line invocation
---------------------------
8.1. To call the test from the command line (from within your Windows (DOS)
    Command Prompt or Macintosh/Linux Terminal), you need to ensure some
    prerequisites have first been met.
8.1.2. You should have your path set so that it will recognize the Maven binary
    'mvn' no matter which directory you are currently browsing.
8.1.3. As it is required by Maven, if you have not already done so set your
    JAVA_HOME environment variable to be where you installed your Java
    (for instance, 'C:\Program Files\Java\jdk1.8.0_40' if using defaults for
    Windows installation).
8.1.4. To simplify the command line call, you should use your Terminal to
    navigate to the directory where the desired pom.xml file is located.
    For this case, this is the directory 'HomeWork'. In that way, the command
    line call will assume there is only one POM file to be run and will
    assume it is in the current directory.
8.2. The following is the command line text to be entered in the Command Prompt
    or Terminal:

        mvn compile test

9. Output
---------
9.1. The expected (successful) command line output is shown below:

    TODO: PUT COMMAND LINE OUTPUT HERE

9.2. At the point where the 'Running TestSuite' is announced, Maven calls
    surefire, which in turn calls TestNG harness that runs the XML suite in
    Selenium Java code. This performs the steps outlined in README sections 4
    and 5.

9.3. The directory 'target' is created in the 'HomeWork' root, where binaries
    and pass/fail report files are found:

    TODO: PUT TREE HERE

9.4. To see a graphical representation of the pass/fail/skip data associated
    with the testNG Suite run, open the file /target/surefire-reports/index.html
    in your favorite browser.

10. Additional Work to be Done, if Time Permitted
--------------------------------------
10.1. If given more time, there are many items to be fixed, finished,
    refactored:
   ----------------------------------------------------------------------------
   A.

10.2. But more importantly, I will list other testcases I would
    automate for the Wikia Home Page, Login, and Wikia Add Video pages if
    given more time. Here is a short list:
   ----------------------------------------------------------------------------
   A.