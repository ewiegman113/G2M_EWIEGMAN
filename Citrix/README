1. This is the README file for the TEST AUTOMATION CHALLENGE presented to Eric Wiegman as part of his consideration
for the "Lead Software Engineer in Test, (SaaS/Cloud, Web, Mobile)" position at Citrix.

2. I have created a web UI test project using the Selenium WebDriver open-source technology and have used
Maven as the tool to perform the build and deploy the test (running the TestNG suite with the surefire plugin).
The client language is Java and the test harness used is TestNG.

3. The following requirements were specified for the Project:
----------------------------------------------------------
A. Apply OOP/OOD principles while designing your classes.
B. Separate test logic and interaction with page elements (page classes). Code should be reusable as much as possible.
C. Project dependencies should be managed by dependency management tool.
D. Use Chrome or headless browser for test execution.
E. Do not store provided user email / password in your code.
F. Project should contain a README file with instructions how to run tests from command line.
G. Publish the project on github and share the link to repository with us.

3.1. Notes on Requirements
--------------------------
3.1.A. Object Oriented Principles and Design considerations were applied when designing the java classes.
3.1.B. Test logic is specified in AutomationChallengeTest.java (src/test/java) and the definitions and
interactions with page elements are defined in the rest of the /src/main/java files. The one exception
is a stub file (in with the 'main' files) CitrixWebElement.java, which is there to subclass the standard
WebElement interface where different behaviours are anticipated.
3.1.C. Maven is used to manage project dependencies
3.1.D. It was verbally stated that Firefox browser was also acceptable. I have used that one.
3.1.E. Further clarification was asked regarding this item and, according to the response, I coded the retrieval
of the email (username) and password from a property file (/src/main/resources/config.properties) found in the
classpath.
3.1.F. This file contains the instructions on how to run the test from command line.
3.1.G. This project is published on GitHub and the link to the repository has been sent to joel.thames@citrix.com.
The link to the project (repository) is https://github.com/ewiegman113/G2M_EWIEGMAN

[See the end of this document for other test cases to be automated for the "Schedule Webinar" page, given more time]

4. The following is a general outline of what was automated
------------------------------------------------------------
4.1. Browser is opened to the default starting page where one is requested to log in to "GoToWebinar".
4.2. The email (username) and password is retrieved from a property file (/src/main/resources/config.properties)
and used to successfully log in the user.
4.2.1. The credentials are submitted.
4.3. On the next page (Schedule a Webinar)..
4.3.1. The title and description are specified for the webinar.
4.3.2. The type is assumed to be the default 'One Session' style.
4.3.3. The Date Picker is invoked and the scheduled date set to 3 (three) calendar days from today.
4.3.4. The start and end times for the webinar are specified (in 12 hour format and noting whether AM or PM).
4.3.5. The Webinar Time Zone is left at the default value.
4.3.6. The Webinar Language is left at the default value (English).
4.3.7. The choices are submitted by pressing the 'Schedule' button.
4.4. On the Manage Webinar page, the My Webinars link (in the left 'Side Bar' navigation tool) is clicked.
4.5 On the My Webinars page, the following information is retrieved and asserted against expected values. In
the order performed, if any comparison of actual and expected values fail, an assertion is thrown and the
test case fails at that point without any further checking of data validity.
4.5.1. The unique webinar name is listed on the page. (Example: Webinar_Cat)
4.5.2. The registration date for the webinar is properly noted for the corresponding listing for the recently
created (uniquely named) webinar. (Example: Tue, Jun 9)
4.5.3. The start and end registration times for the webinar are properly noted for the corresponding listing
for the recently created (uniquely named) webinar. (Example: 10:00 PM - 11:30 PM PDT)

Unless otherwise noted, this one test case run was parameterized using the TestNG DataProvider -- with that data
separated from the code in its own /src/main/java/WebinarDataProvider.java file.

Also, note that I did not perform any cleanup routines (such as Cancelling the automation-created webinar nor
closing the invoked browser). This was done on purpose so that you might more easily check that the automation
properly performed the prescribed procedures (consonance?)

5. The project is stored on GitHub at public repository G2M_EWIEGMAN.
5.1 The directory structure is shown below:

Citrix (root)
|
|   Citrix.iml
|   pom.xml
|   README
|
|   docs
|   |   allclasses-frame.html
|   |   allclasses-noframe.html
|   |   AutomationChallengeTest.html
|   |   CitrixWebElement.html
|   |   constant-values.html
|   |   deprecated-list.html
|   |   help-doc.html
|   |   index.html
|   |   MeetingDeletionPage.html
|   |   MeetingInvitePeoplePage.html
|   |   MeetingLoginPage.html
|   |   MeetingSchedulingPage.html
|   |   MyAccountPage.html
|   |   MyMeetingsPage.html
|   |   MyWebinarsPage.html
|   |   overview-tree.html
|   |   package-frame.html
|   |   package-list
|   |   package-summary.html
|   |   package-tree.html
|   |   script.js
|   |   SharedLoginPage.html
|   |   stylesheet.css
|   |   WebinarDataProvider.html
|   |   WebinarLoginPage.html
|   |   WebinarSchedulingPage.html
|   |   WebinarsSideBar.html
|   |
|   |   index-files
|           index-1.html
|           index-10.html
|           index-11.html
|           index-12.html
|           index-13.html
|           index-14.html
|           index-15.html
|           index-16.html
|           index-17.html
|           index-18.html
|           index-19.html
|           index-2.html
|           index-3.html
|           index-4.html
|           index-5.html
|           index-6.html
|           index-7.html
|           index-8.html
|           index-9.html
|
|   src
    |   main
    |   |   java
    |   |       CitrixWebElement.java
    |   |       MeetingDeletionPage.java
    |   |       MeetingInvitePeoplePage.java
    |   |       MeetingLoginPage.java
    |   |       MeetingSchedulingPage.java
    |   |       MyAccountPage.java
    |   |       MyMeetingsPage.java
    |   |       MyWebinarsPage.java
    |   |       SharedLoginPage.java
    |   |       WebinarDataProvider.java
    |   |       WebinarLoginPage.java
    |   |       WebinarSchedulingPage.java
    |   |       WebinarsSideBar.java
    |   |
    |   |   resources
    |           config.properties
    |           testng.xml
    |
    |   test
        |   java
                AutomationChallengeTest.java

The Citrix.iml file is not required to run the test, but it shows the classpath information as defined in
IntelliJ's IDEA IDE that was used to code this exercise. You may safely omit it if desired.

5.2 Please note that the directory structure is important, and file/directory changes should not be made. Failure
to leave the structure as is will cause Maven, the surefire plugin, or other tools to not recognize the classpath
items correctly, leading to failures.

6. For more information on the defined java elements in this project, invoke index.html at Citrix/docs and use the API
viewer to read the JavaDoc supplied text.

7. Command-line invocation.
---------------------------
7.1. To call the test from the command line (from within your Windows (DOS) Command Prompt or Macintosh/Linux Terminal),
you need to ensure some prerequisites have first been met.
7.1.2. You should have your path set so that it will recognize the Maven binary 'mvn' no matter what directory
you are currently browsing.
7.1.3. As it is required by Maven, if you have not already done so then set your JAVA_HOME environment variable
to be where you installed your Java (for instance, 'C:\Program Files\Java\jdk1.8.0_40' if using defaults for
Windows installation).
7.1.4. To simplify the command line call, you should use your Terminal to navigate to the directory where the
desired pom.xml file is located. For this case, this is the directory 'Citrix'. In that way, the command line call
will assume there is only one POM file to be run and will assume it is in the current directory.
7.2. The following is the command line expression to be entered in the Command Prompt or Terminal:

    mvn compile test

8. Output
---------
